#!/usr/bin/env python3
import os
import argparse

from astparserpy.parser import parse_file as parse_py, extract_definitions as extract_py_defs
from astparsercxx.parser import parse_file as parse_cpp, extract_definitions as extract_cpp_defs
from prompt_builder import build_prompts
from llm_client import LLMClient
from doc_renderer import render_docs

def collect_definitions(repo_root: str = '.') -> list[dict]:
    """
    –û–±—Ö–æ–¥–∏—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –≤ —Ä–µ–ø–æ –∏ —Å–æ–±–∏—Ä–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:
    - .py ‚Üí Python AST
    - .cpp/.cc/.h/.hpp ‚Üí C++ AST
    """
    definitions: list[dict] = []
    for root, _, files in os.walk(repo_root):
        for fn in files:
            path = os.path.join(root, fn)
            rel = os.path.relpath(path, repo_root)
            try:
                if fn.endswith('.py'):
                    tree = parse_py(path)
                    defs = extract_py_defs(tree)
                elif fn.endswith(('.cpp', '.cc', '.h', '.hpp')):
                    tu = parse_cpp(path)
                    defs = extract_cpp_defs(tu)
                else:
                    continue
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {rel}: {e}")
                continue

            for kind, name, line in defs:
                definitions.append({
                    'file': rel,
                    'type': kind,
                    'name': name,
                    'line': line
                })
    return definitions

def main():
    parser = argparse.ArgumentParser(description="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
    parser.add_argument(
        '--repo-root', '-r',
        default='.',
        help='–ü—É—Ç—å –∫ –∫–æ—Ä–Ω—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é'
    )
    parser.add_argument(
        '--out', '-o',
        default='docs',
        help='–ü–∞–ø–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ .md-—Ñ–∞–π–ª–æ–≤'
    )
    args = parser.parse_args()

    repo_root = args.repo_root
    output_dir = args.out

    print(f"üìÇ –ë–µ—Ä—ë–º –∫–æ–¥ –∏–∑: {repo_root}")
    defs = collect_definitions(repo_root)
    print(f"üîé –ù–∞–π–¥–µ–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π: {len(defs)}")

    prompts = build_prompts(defs, repo_root)

    client = LLMClient()
    responses = {}
    for key, prompt in prompts.items():
        print(f"‚úèÔ∏è  –ó–∞–ø—Ä–æ—Å LLM –¥–ª—è {key}...")
        responses[key] = client.complete(prompt)

    render_docs(
        definitions=defs,
        llm_responses=responses,
        output_dir=output_dir,
        template_dir="templates"
    )
    print(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –≤ –ø–∞–ø–∫–µ {output_dir}/")

if __name__ == "__main__":
    main()
